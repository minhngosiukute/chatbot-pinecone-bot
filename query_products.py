# query_products.py  (Azure OpenAI + Pinecone search - ch·ªâ 1 s·∫£n ph·∫©m t·ªët nh·∫•t)
import os
from dotenv import load_dotenv
from openai import AzureOpenAI
from pinecone import Pinecone

# --- N·∫°p bi·∫øn m√¥i tr∆∞·ªùng ---
load_dotenv()

AZURE_OPENAI_KEY        = os.getenv("AZURE_OPENAI_KEY")
AZURE_OPENAI_ENDPOINT   = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_API_VER    = os.getenv("AZURE_OPENAI_API_VERSION", "2024-05-01-preview")
AZURE_EMBED_DEPLOY      = os.getenv("AZURE_EMBED_DEPLOY", "embedding-deploy")
PINECONE_API_KEY        = os.getenv("PINECONE_API_KEY")
INDEX_NAME              = "products-index"

# --- Kh·ªüi t·∫°o client ---
client = AzureOpenAI(
    api_key=AZURE_OPENAI_KEY,
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    api_version=AZURE_OPENAI_API_VER,
)
pc = Pinecone(api_key=PINECONE_API_KEY)
index = pc.Index(INDEX_NAME)

# --- H√†m t·∫°o embedding ---
def embed(text: str):
    r = client.embeddings.create(model=AZURE_EMBED_DEPLOY, input=text)
    return r.data[0].embedding

# --- H·ªèi ng∆∞·ªùi d√πng ---
query = input("üîé Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m b·∫°n c·∫ßn: ").strip()
if not query:
    print("‚ùå B·∫°n ch∆∞a nh·∫≠p g√¨ c·∫£.")
    exit()

# --- T·∫°o vector truy v·∫•n ---
vec = embed(query)

# --- T√¨m top 1 ---
res = index.query(
    vector=vec,
    top_k=1,
    include_metadata=True
)

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
if not res["matches"]:
    print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.")
else:
    match = res["matches"][0]
    m = match["metadata"]
    print("\n‚úÖ S·∫£n ph·∫©m ph√π h·ª£p nh·∫•t:")
    print(f"üè∑Ô∏è T√™n: {m.get('name', '(Kh√¥ng t√™n)')}")
    print(f"üí∞ Gi√°: {m.get('price', 'Ch∆∞a r√µ')} VNƒê")
    print(f"üîó Link: {m.get('url', '')}")
    if m.get("image_url"):
        print(f"üñº H√¨nh ·∫£nh: {m['image_url']}")
    print(f"üìä ƒê·ªô t∆∞∆°ng ƒë·ªìng: {match['score']:.3f}")
