# app.py ‚Äî FastAPI + Azure OpenAI + Pinecone
import os
from fastapi import FastAPI, Query, Request
from pydantic import BaseModel
from dotenv import load_dotenv
from openai import AzureOpenAI
from pinecone import Pinecone

load_dotenv()

client = AzureOpenAI(
    api_key=os.getenv("AZURE_OPENAI_KEY"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_version=os.getenv("AZURE_OPENAI_API_VERSION", "2024-05-01-preview"),
)
EMBED_DEPLOY = os.getenv("AZURE_EMBED_DEPLOY", "embedding-deploy")

pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
INDEX_NAME = os.getenv("PINECONE_INDEX", "products-index")
index = pc.Index(INDEX_NAME)

app = FastAPI()

def embed(text: str):
    r = client.embeddings.create(model=EMBED_DEPLOY, input=text)
    return r.data[0].embedding

def search_one(query: str):
    vec = embed(query)
    res = index.query(vector=vec, top_k=1, include_metadata=True)
    if not res.get("matches"):
        return None
    match = res["matches"][0]
    m = match["metadata"]
    return {
        "name": m.get("name", ""),
        "price": m.get("price", ""),
        "url": m.get("url", ""),
        "image_url": m.get("image_url", ""),
        "score": match.get("score", 0.0),
    }

@app.get("/health")
def health():
    return {"ok": True}

@app.get("/search")
def search(q: str = Query(..., description="C√¢u h·ªèi/m√¥ t·∫£ s·∫£n ph·∫©m")):
    hit = search_one(q)
    return {"result": hit}

@app.post("/search")
async def search_webhook(request: Request):
    body = await request.json()
    query = body.get("queryResult", {}).get("queryText", "")

    if not query:
        return {"fulfillmentText": "M√¨nh ch∆∞a hi·ªÉu b·∫°n mu·ªën t√¨m g√¨ üßê"}

    hit = search_one(query)
    if not hit:
        return {"fulfillmentText": "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p."}

    title = hit["name"] or "S·∫£n ph·∫©m"
    subtitle = f"Gi√°: {hit['price']} VND" if hit.get("price") else ""
    image = hit.get("image_url") or ""
    url = hit.get("url") or ""

    # CH√ö √ù: ƒê√¢y l√† format ƒë√∫ng cho Dialogflow Messenger
    payload = {
        "richContent": [[
            {
                "type": "image",
                "rawUrl": image,        # n√™n l√† https c√¥ng khai ƒë·ªÉ ch·∫Øc ch·∫Øn hi·ªán
                "accessibilityText": title
            },
            {
                "type": "info",
                "title": title,
                "subtitle": subtitle,
                "actionLink": url       # n√∫t m·ªü link
            },
            {
                "type": "button",
                "icon": {"type": "launch", "color": "#FFFFFF"},
                "text": "Xem chi ti·∫øt",
                "link": url
            }
        ]]
    }

    return {
        # fallback text (ph√≤ng khi payload kh√¥ng render)
        "fulfillmentText": f"{title}\n{subtitle}\n{url}",
        "fulfillmentMessages": [
            {"payload": payload}  # KH√îNG c·∫ßn set platform; DF t·ª± hi·ªÉu cho Messenger
        ],
    }
